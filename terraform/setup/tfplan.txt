
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.datadog_integration.data.aws_iam_policy_document.datadog_aws_integration_assume_role will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "datadog_aws_integration_assume_role" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions = [
              + "sts:AssumeRole",
            ]

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + (known after apply),
                ]
              + variable = "sts:ExternalId"
            }

          + principals {
              + identifiers = [
                  + "arn:aws:iam::464622532012:root",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.datadog_integration.aws_iam_policy.datadog_aws_integration will be created
  + resource "aws_iam_policy" "datadog_aws_integration" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "DatadogAWSIntegrationPolicy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "xray:GetTraceSummaries",
                          + "xray:BatchGetTraces",
                          + "wafv2:ListLoggingConfigurations",
                          + "wafv2:GetRuleGroup",
                          + "wafv2:GetRegexPatternSet",
                          + "wafv2:GetLoggingConfiguration",
                          + "wafv2:GetIPSet",
                          + "waf:ListRules",
                          + "waf:ListRuleGroups",
                          + "waf-regional:ListRules",
                          + "waf-regional:ListRuleGroups",
                          + "timestream:DescribeEndpoints",
                          + "tag:GetTagValues",
                          + "tag:GetTagKeys",
                          + "tag:GetResources",
                          + "support:RefreshTrustedAdvisorCheck",
                          + "support:DescribeTrustedAdvisor*",
                          + "states:ListStateMachines",
                          + "states:DescribeStateMachine",
                          + "sqs:ListQueues",
                          + "sns:Publish",
                          + "sns:List*",
                          + "sns:GetSubscriptionAttributes",
                          + "ses:Get*",
                          + "savingsplans:DescribeSavingsPlans",
                          + "savingsplans:DescribeSavingsPlanRates",
                          + "s3:PutBucketNotification",
                          + "s3:ListAllMyBuckets",
                          + "s3:ListAccessGrants",
                          + "s3:GetBucketTagging",
                          + "s3:GetBucketNotification",
                          + "s3:GetBucketLogging",
                          + "s3:GetBucketLocation",
                          + "route53:List*",
                          + "redshift:DescribeLoggingStatus",
                          + "redshift:DescribeClusters",
                          + "rds:List*",
                          + "rds:Describe*",
                          + "organizations:List*",
                          + "organizations:Describe*",
                          + "oam:ListSinks",
                          + "oam:ListAttachedLinks",
                          + "logs:TestMetricFilter",
                          + "logs:PutSubscriptionFilter",
                          + "logs:FilterLogEvents",
                          + "logs:DescribeSubscriptionFilters",
                          + "logs:DescribeLogStreams",
                          + "logs:DescribeLogGroups",
                          + "logs:DeleteSubscriptionFilter",
                          + "lightsail:GetInstancePortStates",
                          + "lambda:List*",
                          + "lambda:GetPolicy",
                          + "kinesis:List*",
                          + "kinesis:Describe*",
                          + "health:DescribeEvents",
                          + "health:DescribeEventDetails",
                          + "health:DescribeAffectedEntities",
                          + "glue:ListRegistries",
                          + "glacier:GetVaultNotifications",
                          + "fsx:ListTagsForResource",
                          + "fsx:DescribeFileSystems",
                          + "events:CreateEventBus",
                          + "es:ListTags",
                          + "es:ListDomainNames",
                          + "es:DescribeElasticsearchDomains",
                          + "elasticmapreduce:List*",
                          + "elasticmapreduce:Describe*",
                          + "elasticloadbalancing:Describe*",
                          + "elasticfilesystem:DescribeTags",
                          + "elasticfilesystem:DescribeFileSystems",
                          + "elasticfilesystem:DescribeAccessPoints",
                          + "elasticbeanstalk:DescribeEnvironmentResources",
                          + "elasticbeanstalk:DescribeEnvironmentHealth",
                          + "elasticache:List*",
                          + "elasticache:Describe*",
                          + "ecs:List*",
                          + "ecs:Describe*",
                          + "ec2:SearchTransitGatewayRoutes",
                          + "ec2:GetTransitGatewayPrefixListReferences",
                          + "ec2:GetSnapshotBlockPublicAccessState",
                          + "ec2:Describe*",
                          + "dynamodb:List*",
                          + "dynamodb:Describe*",
                          + "directconnect:Describe*",
                          + "cur:DescribeReportDefinitions",
                          + "codedeploy:List*",
                          + "codedeploy:BatchGet*",
                          + "cloudwatch:List*",
                          + "cloudwatch:Get*",
                          + "cloudwatch:Describe*",
                          + "cloudtrail:LookupEvents",
                          + "cloudtrail:GetTrailStatus",
                          + "cloudtrail:DescribeTrails",
                          + "cloudfront:ListDistributions",
                          + "cloudfront:GetDistributionConfig",
                          + "cassandra:Select",
                          + "budgets:ViewBudget",
                          + "bcm-data-exports:ListExports",
                          + "bcm-data-exports:GetExport",
                          + "backup:ListRecoveryPointsByBackupVault",
                          + "backup:List*",
                          + "autoscaling:Describe*",
                          + "apigateway:GET",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.datadog_integration.aws_iam_role.datadog_aws_integration will be created
  + resource "aws_iam_role" "datadog_aws_integration" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + description           = "Role for Datadog AWS Integration"
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "DatadogAWSIntegrationRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.datadog_integration.aws_iam_role_policy_attachment.datadog_aws_integration will be created
  + resource "aws_iam_role_policy_attachment" "datadog_aws_integration" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "DatadogAWSIntegrationRole"
    }

  # module.datadog_integration.aws_iam_role_policy_attachment.datadog_aws_integration_security_audit will be created
  + resource "aws_iam_role_policy_attachment" "datadog_aws_integration_security_audit" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/SecurityAudit"
      + role       = "DatadogAWSIntegrationRole"
    }

  # module.datadog_integration.datadog_integration_aws.datadog_aws_integration will be created
  + resource "datadog_integration_aws" "datadog_aws_integration" {
      + account_id                           = "945702879066"
      + cspm_resource_collection_enabled     = (known after apply)
      + extended_resource_collection_enabled = (known after apply)
      + external_id                          = (known after apply)
      + id                                   = (known after apply)
      + metrics_collection_enabled           = (known after apply)
      + resource_collection_enabled          = (known after apply)
      + role_name                            = "DatadogAWSIntegrationRole"
    }

  # module.github_oidc_role.data.aws_iam_policy_document.oidc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "oidc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions = [
              + "sts:AssumeRoleWithWebIdentity",
            ]

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + "sts.amazonaws.com",
                ]
              + variable = "token.actions.githubusercontent.com:aud"
            }
          + condition {
              + test     = "StringLike"
              + values   = [
                  + "repo:elgorithm/*",
                ]
              + variable = "token.actions.githubusercontent.com:sub"
            }

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "Federated"
            }
        }
    }

  # module.github_oidc_role.aws_iam_openid_connect_provider.this will be created
  + resource "aws_iam_openid_connect_provider" "this" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags_all        = (known after apply)
      + thumbprint_list = [
          + "6938fd4d98bab03faadb97b34396831e3780aea1",
          + "1c58a3a8518e8759bf075b76b750d4f2df264fcd",
        ]
      + url             = "https://token.actions.githubusercontent.com"
    }

  # module.github_oidc_role.aws_iam_policy.s3 will be created
  + resource "aws_iam_policy" "s3" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = (known after apply)
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:PutObject",
                          + "s3:ListBucket",
                          + "s3:GetObject",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::beanstalk-artifacts-945702879066/*",
                          + "arn:aws:s3:::beanstalk-artifacts-945702879066",
                        ]
                    },
                  + {
                      + Action   = [
                          + "elasticbeanstalk:UpdateEnvironment",
                          + "elasticbeanstalk:DescribeEnvironments",
                          + "elasticbeanstalk:DescribeEnvironmentResources",
                          + "elasticbeanstalk:DescribeApplicationVersions",
                          + "elasticbeanstalk:CreateApplicationVersion",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.github_oidc_role.aws_iam_role.this will be created
  + resource "aws_iam_role" "this" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "GitHub-OIDC-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.github_oidc_role.aws_iam_role_policy_attachment.attach-deploy will be created
  + resource "aws_iam_role_policy_attachment" "attach-deploy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
      + role       = "GitHub-OIDC-role"
    }

  # module.github_oidc_role.aws_iam_role_policy_attachment.attach_beanstalk_policy will be created
  + resource "aws_iam_role_policy_attachment" "attach_beanstalk_policy" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "GitHub-OIDC-role"
    }

Plan: 10 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + oidc_role_arn = (known after apply)
